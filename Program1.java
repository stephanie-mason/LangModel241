/* 
 * Program1.java
 *
 * The driver program for CSCI 241's Program 1
 *
 * Creates a LanguageModel object and prompts for sentences to complete
 * 
 * Do not modify this file.  
 *
 * Brian Hutchinson
 * January 2016
 *
 * ----------------------------------------------------------------------------
 *
 * usage:
 *
 * java LanguageModel inputFilename maxOrder [vocabFilename countsFilename]
 *
 * where the arguments are
 * 
 *   inputFileName         a plaintext file from which your program will estimate counts
 *   maxOrder              the maximum n-gram order to estimate and report results on
 *   vocabFileName         a dictionary of words that appear in the input file 
 *                              will be generated by the program
 *   countsFileName        a file of ngram counts 
 *                             will be generated by the program
 * 
 *                         the last two arguments can be omitted (together),
 *                         in which case neither file will be written   
 *
*/

import java.util.ArrayList;

public class Program1 {
    final static int SEED = 5;

    public static void main(String[] args) {
        if( args.length != 2 && args.length != 4 ) {
            System.err.println("Error: Wrong number of arguments\n");
            System.exit(1);
        }
        String inputFileName  = args[0];
        int maxOrder          = Integer.parseInt(args[1]);
        String vocabFileName  = null;
        String countsFileName = null;
        
        if( args.length == 4 ) {
            vocabFileName = args[2];
            countsFileName = args[3];
        }

        java.util.Random generator = new java.util.Random(SEED);

        LanguageModel lm = new LanguageModel(inputFileName, maxOrder, generator, vocabFileName, countsFileName);
        java.util.Scanner input = new java.util.Scanner(System.in);
        System.err.print("Enter a history: ");
        while( input.hasNext() ) {
            ArrayList<String> history = new ArrayList<String>();
            String line = input.nextLine();
            String[] fields = line.split(" ");
            for( int i=0; i<fields.length; i++ ) {
                history.add(fields[i]);
            }
            System.out.println("history is [" + LanguageModel.arrayToString(history) + "]");
            for( int i=2; i<=lm.getMaxOrder(); i++ ) {
                System.out.print("Order " + i + " completion: " + LanguageModel.arrayToString(history));
                System.out.println(lm.randomCompletion(history, i));
            }
            System.err.print("\nEnter a history: ");
        }
        return;
    }
}
